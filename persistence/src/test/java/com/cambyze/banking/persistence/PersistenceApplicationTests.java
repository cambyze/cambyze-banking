package com.cambyze.banking.persistence;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import com.cambyze.banking.persistence.model.Account;
import com.cambyze.banking.persistence.model.Constants;
import com.cambyze.banking.persistence.model.Operation;
import com.cambyze.banking.persistence.model.Person;
import com.cambyze.banking.persistence.services.PersistenceServices;


@SpringBootTest
class PersistenceApplicationTests {

  private static final Logger LOGGER = LoggerFactory.getLogger(PersistenceApplicationTests.class);

  @Autowired
  private PersistenceServices persistenceServices;

  @Test
  void testPersonServices() {
    LOGGER.debug("[testPersonServices] Test services");
    String personId = persistenceServices.createNewPerson("DOE", "John", "john.doe@gmail.com");
    LOGGER.debug("[testPersonServices] New client: {}", personId);
    assertNotNull(personId);
    assertTrue(personId.startsWith("CLI-"));
    Person per = persistenceServices.findPersonByid(personId);
    assertNotNull(per);
    per = persistenceServices.findPersonByid("0");
    assertNull(per);
  }

  @Test
  void testAccountServices() {
    LOGGER.debug("[testAccountServices] Test Services");
    String personId = persistenceServices.createNewPerson("DOE", "John", "john.doe2@gmail.com");
    Person per = persistenceServices.findPersonByid(personId);
    String ban = persistenceServices.createNewBankAccount(personId);
    LOGGER.debug(
        "[testAccountServices] New BAN generated by PersistenceServices.createNewBankAccount(): {} for the new client {}",
        ban, per);
    assertTrue(ban != null && ban.startsWith("CAMBYZEBANK-"));
    List<Account> acs = persistenceServices.findBankAccountsByPerson(per.getId());
    assertTrue(acs != null && !acs.isEmpty());
    Account ba = persistenceServices.findBankAccountByBAN(ban);
    persistenceServices.createNewBankingOperation(ba, LocalDate.now(),
        Constants.OPERATION_TYPE_DEPOSIT, BigDecimal.valueOf(100.0));
    List<Operation> ops =
        persistenceServices.findBankingOperationsOfBankAccount(ba.getBankAccountNumber());
    for (Operation op : ops) {
      LOGGER.debug("[testOperationServices] Operation retrieved: {} ",
          persistenceServices.operationToString(op));
    }
    assertTrue(!ops.isEmpty());
  }

  @Test
  void testOperationServices() {
    LOGGER.debug("[testOperationServices] Test Operation Services");
    String opId = persistenceServices.createNewBankingOperation(null, null, "0", null);
    assertTrue(opId == String.valueOf(Constants.INVALID_BANK_ACCOUNT));
    Account ba = null; // Bad idea ;)
    persistenceServices.createNewBankingOperation(ba, LocalDate.now(),
        Constants.OPERATION_TYPE_DEPOSIT, BigDecimal.valueOf(100.0));
    assertTrue(opId == String.valueOf(Constants.INVALID_BANK_ACCOUNT));
    String personId = persistenceServices.createNewPerson("DOE", "John", "john.doe25@gmail.com");
    String ban = persistenceServices.createNewBankAccount(personId);
    ba = persistenceServices.findBankAccountByBAN(ban);
    if (ba != null) {
      opId = persistenceServices.createNewBankingOperation(ba, LocalDate.now(),
          Constants.OPERATION_TYPE_DEPOSIT, BigDecimal.valueOf(-100.0));

      assertTrue(opId == String.valueOf(Constants.INVALID_AMOUNT));

      opId = persistenceServices.createNewBankingOperation(ba, LocalDate.now(),
          Constants.OPERATION_TYPE_DEPOSIT, BigDecimal.valueOf(100.0));
      LOGGER.debug("[testOperationServices] First success with Operation id: " + opId);
      assertNotNull(opId);
      opId = persistenceServices.createNewBankingOperation(ba, LocalDate.now(),
          Constants.OPERATION_TYPE_DEPOSIT, BigDecimal.valueOf(1050.36));
      List<Operation> ops =
          persistenceServices.findBankingOperationsOfBankAccount(ba.getBankAccountNumber());
      LOGGER.debug("[testOperationServices] Nb of operations retrieved: {}", ops.size());
      for (Operation op : ops) {
        LOGGER.debug("[testOperationServices] Operation: {}",
            persistenceServices.operationToString(op));
      }
      assertTrue(!ops.isEmpty());
    } else {
      LOGGER.error("[testOperationServices] Anormal error banking account null ");
      assertNotNull(ba);
    }
  }

  @Test
  void testOverdraftServices() {
    LOGGER.debug("[testOverdraftServices] Test overdraft Services");
    String personId = persistenceServices.createNewPerson("BARBIE", "Ken", "ken.barbie@gmail.com");
    String ban = persistenceServices.createNewBankAccount(personId);
    Account ba = persistenceServices.findBankAccountByBAN(ban);
    persistenceServices.createOverdraft(ba, BigDecimal.valueOf(1500.0));
    ba = persistenceServices.findBankAccountByBAN(ban);
    LOGGER.debug("[testOverdraftServices] overdraft amount: " + ba.getOverdraftAmount());
    assertTrue(ba.getOverdraftAmount().equals(BigDecimal.valueOf(1500.0)));
  }

  @Test
  void testSavingsServices() {
    LOGGER.debug("[testSavingsServices] Test savings Services");
    String personId = persistenceServices.createNewPerson("BARBIE", "Ken", "ken89@gmail.com");
    String ban = persistenceServices.createSavingsAccount(personId);
    Account ba = persistenceServices.findBankAccountByBAN(ban);
    LOGGER.debug("[testSavingsServices] New saving account + " + ba.getBankAccountNumber()
        + " type = " + ba.getAccountType());
    assertEquals(ba.getAccountType(), Constants.ACCOUNT_TYPE_SAVINGS);
  }


}
