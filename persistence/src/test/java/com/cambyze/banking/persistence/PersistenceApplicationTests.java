package com.cambyze.banking.persistence;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import com.cambyze.banking.persistence.model.Account;
import com.cambyze.banking.persistence.model.Constants;
import com.cambyze.banking.persistence.model.Operation;
import com.cambyze.banking.persistence.services.PersistenceServices;


@SpringBootTest
class PersistenceApplicationTests {

  private static final Logger LOGGER = LoggerFactory.getLogger(PersistenceApplicationTests.class);

  // @Autowired
  // private BankAccountRepository bankAccountRepository;

  @Autowired
  private PersistenceServices persistenceServices;


  // @Test
  // void testAccountDao() {
  // LOGGER.debug("Test Account DAO");
  //
  // LOGGER.debug("Find a non existing BAN");
  // Account ba = bankAccountRepository.findByBankAccountNumber("DOES NOT EXIST");
  // if (ba == null) {
  // LOGGER.debug("The BAN does not exist, it's OK");
  // } else {
  // LOGGER.debug("The BAN exists !!!" + ba.getId());
  // }
  // assertTrue(ba == null);
  //
  // }

  @Test
  void testAccountServices() {
    LOGGER.debug("Test Services");
    String ban = persistenceServices.createNewBankAccount();
    LOGGER.debug("New BAN generated by PersistenceServices.createNewBankAccount(): " + ban);
    assertTrue(ban != null && ban.startsWith("CAMBYZEBANK-"));
  }


  @Test
  void testOperationServices() {
    LOGGER.debug("Test Operation Services");

    LOGGER.debug("Test technical error");
    String opId = persistenceServices.createNewBankingOperation(null, null, "0", null);
    LOGGER.debug("First error with null value then opId:" + opId);
    assertTrue(opId == String.valueOf(Constants.INVALID_BANK_ACCOUNT));

    Account ba = null; // Bad idea ;)
    persistenceServices.createNewBankingOperation(ba, LocalDate.now(),
        Constants.OPERATION_TYPE_DEPOSIT, BigDecimal.valueOf(100.0));
    LOGGER.debug("Second error with bank account null then opId:" + opId);
    assertTrue(opId == String.valueOf(Constants.INVALID_BANK_ACCOUNT));


    String ban = persistenceServices.createNewBankAccount();
    ba = persistenceServices.findBankAccountByBAN(ban);
    if (ba != null) {
      LOGGER.debug("BAN created for the operation : " + ba.getBankAccountNumber());
      opId = persistenceServices.createNewBankingOperation(ba, LocalDate.now(),
          Constants.OPERATION_TYPE_DEPOSIT, BigDecimal.valueOf(-100.0));
      assertTrue(opId == String.valueOf(Constants.INVALID_AMOUNT));

      opId = persistenceServices.createNewBankingOperation(ba, LocalDate.now(),
          Constants.OPERATION_TYPE_DEPOSIT, BigDecimal.valueOf(100.0));
      LOGGER.debug("First success with Operation id: " + opId);
      // assertTrue(opId > 0);
      assertNotNull(opId);
      Operation op = persistenceServices.findBankingOperationById(opId);
      LOGGER.debug("First success with Operation : " + op);
      // assertTrue(op.getBankAccount().getBankAccountNumber().equals(ba.getBankAccountNumber()));
      assertTrue(op.getAccount().getBankAccountNumber().equals(ba.getBankAccountNumber()));

      opId = persistenceServices.createNewBankingOperation(ba, LocalDate.now(),
          Constants.OPERATION_TYPE_DEPOSIT, BigDecimal.valueOf(1050.36));
      LOGGER.debug("getBank TEST: {} FinBankOp : {}", ba.getBankAccountNumber(),
          persistenceServices.findBankingOperationsOfBankAccount(ba.getBankAccountNumber()));
      List<Operation> ops =
          persistenceServices.findBankingOperationsOfBankAccount(ba.getBankAccountNumber());
      LOGGER.debug("Operations retrieved:,  {} ", ops);
      LOGGER.debug("List of operations : {}", ops);
      assertTrue(!ops.isEmpty());
    } else {
      LOGGER.error("Anormal error banking account null ");
      assertTrue(ba != null);
    }

  }

  @Test
  void testOverdraftServices() {
    // Success
    LOGGER.debug("Test overdraft Services");
    String ban = persistenceServices.createNewBankAccount();
    Account ba = persistenceServices.findBankAccountByBAN(ban);
    persistenceServices.createOverdraft(ba, BigDecimal.valueOf(1500.0));
    assertTrue(ba.getOverdraftAmount().equals(BigDecimal.valueOf(1500.0)));
  }

  @Test
  void testSavingsServices() {
    // Success
    LOGGER.debug("Test savings Services");
    String ban = persistenceServices.createSavingsAccount();
    Account ba = persistenceServices.findBankAccountByBAN(ban);
    assertTrue(ba.getAccountType() == Constants.ACCOUNT_TYPE_SAVINGS);

  }

}
