package com.cambyze.banking.persistence;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import com.cambyze.banking.persistence.model.Account;
import com.cambyze.banking.persistence.model.Constants;
import com.cambyze.banking.persistence.model.Operation;
import com.cambyze.banking.persistence.model.Person;
import com.cambyze.banking.persistence.services.PersistenceServices;


@SpringBootTest
class PersistenceApplicationTests {

  private static final Logger LOGGER = LoggerFactory.getLogger(PersistenceApplicationTests.class);

  @Autowired
  private PersistenceServices persistenceServices;

  @Test
  void testPersonServices() {
    LOGGER.debug("=== PERSONE TEST ===");
    // String pers = persistenceServices.createNewPerson();
    // String pers = persistenceServices.createNewPerson("je", "S'apelle", "Groot");
    String pers = persistenceServices.createNewPerson("i'm", "your", "phather");
    LOGGER.debug("New user generated by persistenceServices: {}", pers);
    assertTrue(pers != null);
    Person pe = persistenceServices.findPersonByid("User-00000001");
    assertNotNull(pe);
    pe = persistenceServices.findPersonByid("User-00000001");
    LOGGER.debug("Find Pers by ID: ({})", pe);
    assertNotNull(pe);
    LOGGER.debug("test findPersonbyId : {}", persistenceServices.findPersonByid("User-00000001"));
    // pe = null;

    List<Account> acs = persistenceServices.findBanOfPerson(pers);
    LOGGER.debug("[TESTfindBanOfPerson] Ban trouver : {}", acs);
    assertTrue(acs != null && !acs.isEmpty());
    pe = null;
    pe = persistenceServices.findPersonByid("0");
    LOGGER.debug("Find Pers by ID error: ({}) test NULL", pe);
    assertTrue(pe == null);
  }

  @Test
  void testAccountServices() {
    LOGGER.debug("[testAccountServices] Test Services");
    // on assume que User-00000001 exist

    String ban = persistenceServices.createNewBankAccount("User-00000001");
    LOGGER.debug(
        "[testAccountServices] New BAN generated by PersistenceServices.createNewBankAccount(): "
            + ban);
    assertTrue(ban != null && ban.startsWith("CAMBYZEBANK-"));
  }

  @Test
  void testOperationServices() {
    LOGGER.debug("[testOperationServices] Test Operation Services");

    LOGGER.debug("[testOperationServices] Test technical error");
    String opId = persistenceServices.createNewBankingOperation(null, null, "0", null);
    LOGGER.debug("[testOperationServices] First error with null value then opId:" + opId);
    assertTrue(opId == String.valueOf(Constants.INVALID_BANK_ACCOUNT));

    Account ba = null; // Bad idea ;)
    persistenceServices.createNewBankingOperation(ba, LocalDate.now(),
        Constants.OPERATION_TYPE_DEPOSIT, BigDecimal.valueOf(100.0));
    LOGGER.debug("[testOperationServices] Second error with bank account null then opId:" + opId);
    assertTrue(opId == String.valueOf(Constants.INVALID_BANK_ACCOUNT));
// on assume que User-00000001 exist
    String ban = persistenceServices.createNewBankAccount("User-00000001");
    ba = persistenceServices.findBankAccountByBAN(ban);
    if (ba != null) {
      LOGGER.debug(
          "[testOperationServices] BAN created for the operation : " + ba.getBankAccountNumber());
      LOGGER.debug("ERROR big decimal -100 {}", opId);
      opId = persistenceServices.createNewBankingOperation(ba, LocalDate.now(),
          Constants.OPERATION_TYPE_DEPOSIT, BigDecimal.valueOf(-100.0));

      assertTrue(opId == String.valueOf(Constants.INVALID_AMOUNT));

      opId = persistenceServices.createNewBankingOperation(ba, LocalDate.now(),
          Constants.OPERATION_TYPE_DEPOSIT, BigDecimal.valueOf(100.0));
      LOGGER.debug("[testOperationServices] First success with Operation id: " + opId);
      assertNotNull(opId);
      opId = persistenceServices.createNewBankingOperation(ba, LocalDate.now(),
          Constants.OPERATION_TYPE_DEPOSIT, BigDecimal.valueOf(1050.36));
      List<Operation> ops =
          persistenceServices.findBankingOperationsOfBankAccount(ba.getBankAccountNumber());
      LOGGER.debug("[testOperationServices] Operations retrieved:,  {} ", ops);
      LOGGER.debug("[testOperationServices] List of operations : {}", ops);
      assertTrue(!ops.isEmpty());
    } else {
      LOGGER.error("[testOperationServices] Anormal error banking account null ");
      assertNotNull(ba);
    }
  }

  @Test
  void testOverdraftServices() {
    LOGGER.debug("[testOverdraftServices] Test overdraft Services");
    String ban = persistenceServices.createNewBankAccount("User-00000001");
    // on assume que User-00000001 exist
    Account ba = persistenceServices.findBankAccountByBAN(ban);
    persistenceServices.createOverdraft(ba, BigDecimal.valueOf(1500.0));
    ba = persistenceServices.findBankAccountByBAN(ban);
    LOGGER.debug("[testOverdraftServices] overdraft amount: " + ba.getOverdraftAmount());
    assertTrue(ba.getOverdraftAmount().equals(BigDecimal.valueOf(1500.0)));
  }

  @Test
  void testSavingsServices() {
    LOGGER.debug("[testSavingsServices] Test savings Services");
    String ban = persistenceServices.createSavingsAccount("User-00000001");
    // on assume que User-00000001 exist
    Account ba = persistenceServices.findBankAccountByBAN(ban);
    LOGGER.debug("[testSavingsServices] New saving account + " + ba.getBankAccountNumber()
        + " type = " + ba.getAccountType());
    assertEquals(ba.getAccountType(), Constants.ACCOUNT_TYPE_SAVINGS);
  }

  @Test
  void Testuser001() {
    List<Account> acs = persistenceServices.findBanOfPerson("User-00000001");
    LOGGER.debug("[Test Find all account User-00000001] Ban trouver : {}", acs);
    assertTrue(acs != null && !acs.isEmpty());
  }

}
